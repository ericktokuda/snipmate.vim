# New Class
snippet skel
	#!/usr/bin/env python3
	"""${1:one-line docstring}
	"""

	import argparse
	import time, datetime
	import os
	from os.path import join as pjoin
	import inspect

	import sys
	import numpy as np
	import matplotlib; matplotlib.use('Agg')
	import matplotlib.pyplot as plt
	from myutils import info, create_readme

	##########################################################
	def main(outdir):
	    info(inspect.stack()[0][3] + '()')

	    ${2:info('For Aiur!')}
	    doneflag = pjoin(outdir, 'DONE')

	    open(doneflag, 'a').write(time.ctime())

	##########################################################
	if __name__ == "__main__":
	    info(datetime.date.today())
	    t0 = time.time()
	    parser = argparse.ArgumentParser(description=__doc__)
	    parser.add_argument('--outdir', default='/tmp/out/', help='Output directory')
	    args = parser.parse_args()

	    os.makedirs(args.outdir, exist_ok=True)
	    readmepath = create_readme(sys.argv, args.outdir)

	    main(args.outdir)

	    info('Elapsed time:{:.02f}s'.format(time.time()-t0))
	    info('Output generated in {}'.format(args.outdir))
snippet mk
	if not os.path.isdir(${1:outdir}): os.mkdir($1)
	${2}
snippet multi
	# from multiprocessing import Pool

	    aux = list(product([args.outdir, ])) # Fill here

	    params = []
	    for i, row in enumerate(aux):
	        params.append(dict(outdir = row[0],)) # and here

	    if args.nprocs == 1:
	        info('Running serially (nprocs:{})'.format(args.nprocs))
	        respaths = [run_experiment(p) for p in params]
	    else:
	        info('Running in parallel (nprocs:{})'.format(args.nprocs))
	        pool = Pool(args.nprocs)
	        respaths = pool.map(run_experiment, params)

	    info('Elapsed time:{}'.format(time.time()-t0))

	if __name__ == "__main__":
	    main()
snippet br
	breakpoint()
	${1}
snippet imp
	import ${1:module}
snippet cl
	class ${1:ClassName}:
		"""${2:short-description}

		Attributes:
			${3:attr(type):description}

		Methods:
			${4:method():description}
		"""

		def __init__(self, ${5:arg1}):
			self.${6:$5} = []
		${7}
# New Function
snippet in
	info('${1:0}:{}'.format($1))${2}
snippet df
	df = pd.read_csv(${1:csvpath})
snippet def
	##########################################################
	def ${1:fname}(${2:outdir}):
	    """${3:Short description} """
	    info(inspect.stack()[0][3] + '()')
snippet for
	for ${1:i, x} in enumerate(${2:mylist}):
	    ${3:print($1)}
snippet pr
	print(${1:0})
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet pl
	W = 640; H = 480
	fig, ax = plt.subplots(figsize=(W*.01, H*.01), dpi=100)
	${1:ax.scatter(x, y)}
	outpath = '/tmp/foo.png'
	plt.savefig(outpath)
snippet subpl
	    nrows = 1;  ncols = 1
	    figscale = 2
	    fig, axs = plt.subplots(nrows, ncols, squeeze=False,
				    figsize=(ncols*figscale, nrows*figscale))
	    for	ii in range(nrows):
	        for jj in range(ncols):
		    axs[ii, jj].plot()
		    axs[ii, jj].set_xlabel()
		    axs[ii, jj].set_ylabel()
	    plt.savefig(outpath)
