# New Class
snippet skel
	#!/usr/bin/env python3
	"""${1:one-line docstring}
	"""

	import argparse
	import logging
	import time
	import os
	from os.path import join as pjoin
	from logging import info
	import inspect

	import numpy as np
	import matplotlib; matplotlib.use('Agg')
	import matplotlib.pyplot as plt

	##########################################################
	def main():
		info(inspect.stack()[0][3] + '()')
		t0 = time.time()
		parser = argparse.ArgumentParser(description=__doc__)
		parser.add_argument('--outdir', default='/tmp/', help='Output directory')
		args = parser.parse_args()

		logging.basicConfig(format='[%(asctime)s] %(message)s',
		datefmt='%Y%m%d %H:%M', level=logging.INFO)

		if not os.path.isdir(args.outdir): os.mkdir(args.outdir)
		${2:print('For Aiur!')}

		info('Elapsed time:{}'.format(time.time()-t0))
	if __name__ == "__main__":
		main()
	
snippet br
	breakpoint()
	${1}
snippet imp
	import ${1:module}
snippet cl
	class ${1:ClassName}:
		"""${2:short-description}

		Attributes:
			${3:attr(type):description}

		Methods:
			${4:method():description}
		"""

		def __init__(self, ${5:arg1}):
			self.${6:$5} = []
		${7}
# New Function
snippet deb
	debug('${1:0}:{}'.format($1))${2}
snippet in
	info('${1:0}:{}'.format($1))${2}
snippet def
	##########################################################
	def ${1:fname}(${2:outdir}):
	    """${3:short-description}

	    Args:
	    ${4:$2}(str): ${5:output dir}

	    Returns:
	    ${6:ret}
	    """
	    info(inspect.stack()[0][3] + '()')

	    ${6:pass}

snippet ifmain
	def main():
		${1:}
	if __name__ == '__main__':
		main()
# print
snippet pr
	print(${1:0})
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet subpl
	    nrows = 1;  ncols = 1
	    figscale = 2
	    fig, axs = plt.subplots(nrows, ncols, squeeze=False,
				    figsize=(ncols*figscale, nrows*figscale))
