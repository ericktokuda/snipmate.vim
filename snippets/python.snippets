# New Class
snippet skel
	#!/usr/bin/env python3
	"""${1:one-line docstring}
	"""

	import argparse
	import time
	import os
	from os.path import join as pjoin
	import inspect

	import sys
	import numpy as np
	from itertools import product
	import matplotlib; matplotlib.use('Agg')
	import matplotlib.pyplot as plt
	from datetime import datetime

	#############################################################
	def info(*args):
	    pref = datetime.now().strftime('[%y%m%d %H:%M:%S]')
	    print(pref, *args, file=sys.stdout)

	##########################################################
	def main():
	    info(inspect.stack()[0][3] + '()')
	    t0 = time.time()
	    parser = argparse.ArgumentParser(description=__doc__)
	    parser.add_argument('--outdir', default='/tmp/out/', help='Output directory')
	    args = parser.parse_args()

	    if not os.path.isdir(args.outdir): os.mkdir(args.outdir)
	    open(pjoin(args.outdir, 'call'), 'w').write('#python ' + ' '.join(sys.argv))

	    ${2:info('For Aiur!')}

	    info('Elapsed time:{}'.format(time.time()-t0))

	##########################################################
	if __name__ == "__main__":
	    main()
snippet mk
	if not os.path.isdir(${1:outdir}): os.mkdir($1)
	${2}
snippet multi
	#!/usr/bin/env python3
	"""${1:one-line docstring}
	"""

	import argparse
	import time
	import os
	from os.path import join as pjoin
	import inspect

	import sys
	import numpy as np
	from itertools import product
	import matplotlib; matplotlib.use('Agg')
	import matplotlib.pyplot as plt
	from multiprocessing import Pool
	from datetime import datetime

	#############################################################
	def info(*args):
	    pref = datetime.now().strftime('[%y%m%d %H:%M:%S]')
	    print(pref, *args, file=sys.stdout)

	#############################################################
	def run_experiment(params_):
	    info(inspect.stack()[0][3] + '()')
	    ${2:info('For Aiur!')}

	##########################################################
	def main():
	    info(inspect.stack()[0][3] + '()')
	    t0 = time.time()
	    parser = argparse.ArgumentParser(description=__doc__)
	    parser.add_argument('--nprocs', type=int, default=1, help='nprocs')
	    parser.add_argument('--outdir', default='/tmp/', help='Output directory')
	    args = parser.parse_args()

	    if not os.path.isdir(args.outdir): os.mkdir(args.outdir)

	    aux = list(product([args.outdir]))

	    params = []
	    for i, row in enumerate(aux):
	        params.append(dict(outdir = row[0],))

	    if args.nprocs == 1:
	        info('Running serially (nprocs:{})'.format(args.nprocs))
	        respaths = [run_experiment(p) for p in params]
	    else:
	        info('Running in parallel (nprocs:{})'.format(args.nprocs))
	        pool = Pool(args.nprocs)
	        respaths = pool.map(run_experiment, params)

	    info('Elapsed time:{}'.format(time.time()-t0))

	if __name__ == "__main__":
	    main()
snippet br
	breakpoint()
	${1}
snippet imp
	import ${1:module}
snippet cl
	class ${1:ClassName}:
		"""${2:short-description}

		Attributes:
			${3:attr(type):description}

		Methods:
			${4:method():description}
		"""

		def __init__(self, ${5:arg1}):
			self.${6:$5} = []
		${7}
# New Function
snippet in
	info('${1:0}:{}'.format($1))${2}
snippet df
	df = pd.read_csv(${1:csvpath})
snippet def
	##########################################################
	def ${1:fname}(${2:outdir}):
	    """${3:Short description}
	    """
	    info(inspect.stack()[0][3] + '()')
snippet for
	for ${1:i, x} in enumerate(${2:mylist}):
	    ${3:print($1)}
snippet pr
	print(${1:0})
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet subpl
	    nrows = 1;  ncols = 1
	    figscale = 2
	    fig, axs = plt.subplots(nrows, ncols, squeeze=False,
				    figsize=(ncols*figscale, nrows*figscale))
	    for	ii in range(nrows):
	        for jj in range(ncols):
		    axs[ii, jj].plot()
		    axs[ii, jj].set_xlabel()
		    axs[ii, jj].set_ylabel()
	    plt.savefig(outpath)
